// uriparse.h
// Generated by pargen at 2017-03-24T23:17:09-0700
// clang-format off
#pragma once

namespace Dim::Detail {

// forward declarations
class IUriParserNotify;


/****************************************************************************
*
*   UriParser
*
***/

class UriParser {
public:
    UriParser (IUriParserNotify * notify) : m_notify(notify) {}
    ~UriParser () {}

    bool parse (const char src[]);
    size_t errpos () const { return m_errpos; }

    IUriParserNotify * notify () const { return m_notify; }

    // sets notify and returns its previous value
    IUriParserNotify * notify (IUriParserNotify * notify);

private:
    IUriParserNotify * m_notify{nullptr};
    size_t m_errpos{0};
};


/****************************************************************************
*
*   Parser event notifications
*   Clients inherit from this class to process parse events
*
***/

class IUriParserNotify {
public:
    virtual ~IUriParserNotify () = default;

    virtual bool onStart () { return true; }
    virtual bool onEnd () { return true; }

    virtual bool onFragmentStart (const char * ptr) { return true; }
    virtual bool onFragmentEnd (const char * eptr) { return true; }
    virtual bool onHostStart (const char * ptr) { return true; }
    virtual bool onHostEnd (const char * eptr) { return true; }
    virtual bool onPortStart (const char * ptr) { return true; }
    virtual bool onPortChar (char ch) { return true; }
    virtual bool onQryNameStart (const char * ptr) { return true; }
    virtual bool onQryNameEnd (const char * eptr) { return true; }
    virtual bool onQryValueStart (const char * ptr) { return true; }
    virtual bool onQryValueEnd (const char * eptr) { return true; }
    virtual bool onSchemeStart (const char * ptr) { return true; }
    virtual bool onSchemeEnd (const char * eptr) { return true; }
    virtual bool onSegmentStart (const char * ptr) { return true; }
    virtual bool onSegmentEnd (const char * eptr) { return true; }
};

} // namespace
