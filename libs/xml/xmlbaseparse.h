// xmlbaseparse.h
// Generated by pargen 2.1.3 at 2017-11-15T18:34:35-0800
// clang-format off
#pragma once

#include "xmlbaseparsebase.h"

namespace Dim::Detail {


/****************************************************************************
*
*   XmlBaseParser
*
***/

class XmlBaseParser : public XmlBaseParserBase {
public:
    using XmlBaseParserBase::XmlBaseParserBase;

    bool parse (char const src[]);
    size_t errpos () const { return m_errpos; }

private:
    bool stateCp (char const *& src);
    bool stateElementTail (char const *& src);

    // Events
    bool onAttrCopyChar (char ch);
    bool onAttrInPlaceEnd (char const * eptr);
    bool onAttrNameStart (char const * ptr);
    bool onAttrNameEnd (char const * eptr);
    bool onAttrValueStart (char const * ptr);
    bool onAttrValueEnd ();
    bool onCDataWithEndStart (char const * ptr);
    bool onCDataWithEndEnd (char const * eptr);
    bool onCharDataChar (char ch);
    bool onCharRefStart ();
    bool onCharRefEnd ();
    bool onCharRefDigitChar (char ch);
    bool onCharRefHexdigChar (char ch);
    bool onElemNameStart (char const * ptr);
    bool onElemNameEnd (char const * eptr);
    bool onElemTextStart (char const * ptr);
    bool onElemTextEnd ();
    bool onElementEnd ();
    bool onEntityAmpEnd ();
    bool onEntityAposEnd ();
    bool onEntityGtEnd ();
    bool onEntityLtEnd ();
    bool onEntityOtherEnd (char const * eptr);
    bool onEntityQuotEnd ();
    bool onEntityValueStart (char const * ptr);
    bool onEntityValueEnd (char const * eptr);
    bool onNormalizableWsChar ();

    // Data members
    size_t m_errpos{0};
};

} // namespace
