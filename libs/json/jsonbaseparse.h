// jsonbaseparse.h
// Generated by pargen at 2017-05-05T18:29:18-0700
// clang-format off
#pragma once

namespace Dim::Detail {

// forward declarations
class IJsonBaseParserNotify;


/****************************************************************************
*
*   JsonBaseParser
*
***/

class JsonBaseParser {
public:
    JsonBaseParser (IJsonBaseParserNotify * notify) : m_notify(notify) {}
    ~JsonBaseParser () {}

    bool parse (const char src[]);
    size_t errpos () const { return m_errpos; }

    IJsonBaseParserNotify * notify () const { return m_notify; }

    // sets notify and returns its previous value
    IJsonBaseParserNotify * notify (IJsonBaseParserNotify * notify);

private:
    bool stateArrayTail (const char *& src);
    bool stateObjectTail (const char *& src);

    IJsonBaseParserNotify * m_notify{nullptr};
    size_t m_errpos{0};
};


/****************************************************************************
*
*   Parser event notifications
*   Clients inherit from this class to process parse events
*
***/

class IJsonBaseParserNotify {
public:
    virtual ~IJsonBaseParserNotify () = default;

    virtual bool onStart () { return true; }
    virtual bool onEnd () { return true; }

    virtual bool onArrayStart (const char * ptr) { return true; }
    virtual bool onArrayEnd (const char * eptr) { return true; }
    virtual bool onEscapeNumberEnd (const char * eptr) { return true; }
    virtual bool onEscapeSingleEnd (const char * eptr) { return true; }
    virtual bool onFalseEnd (const char * eptr) { return true; }
    virtual bool onIntChar (char ch) { return true; }
    virtual bool onNullEnd (const char * eptr) { return true; }
    virtual bool onNumberEnd (const char * eptr) { return true; }
    virtual bool onObjectStart (const char * ptr) { return true; }
    virtual bool onObjectEnd (const char * eptr) { return true; }
    virtual bool onTrueEnd (const char * eptr) { return true; }
};

} // namespace
